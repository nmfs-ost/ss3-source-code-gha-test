name: add-exe-build-artifacts-to-PR

on:
  workflow_run:
    workflows: ["build-ss3"]
    types:
      - completed
  workflow_dispatch: 

jobs:
  artifacts-url-comments:
    name: add artifact links to pull request and related issues job
    # This 'if' condition ensures the job only runs if the parent workflow was a PR
    # AND that PR has a number (i.e., it's not empty).
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.pull_requests[0].number
    runs-on: ubuntu-latest
    steps:
      - name: Get Pull Request Number and Parent Run Details
        id: get_pr_details
        run: |
          # Extract the PR number from the workflow_run event payload.
          PR_NUMBER=${{ github.event.workflow_run.pull_requests[0].number }}
          # Get details about the parent workflow run to construct the artifact URL.
          PARENT_RUN_ID=${{ github.event.workflow_run.id }}
          PARENT_REPO_OWNER=${{ github.event.workflow_run.repository.owner.login }}
          PARENT_REPO_NAME=${{ github.event.workflow_run.repository.name }}
          PARENT_WORKFLOW_ID=${{ github.event.workflow_run.workflow_id }}

          echo "Found PR Number: $PR_NUMBER"
          echo "Parent Run ID: $PARENT_RUN_ID"
          echo "Parent Repo: $PARENT_REPO_OWNER/$PARENT_REPO_NAME"
          echo "Parent Workflow ID: $PARENT_WORKFLOW_ID"

          # Output these values for subsequent steps to use.
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "parent_run_id=$PARENT_RUN_ID" >> "$GITHUB_OUTPUT"
          echo "parent_repo_owner=$PARENT_REPO_OWNER" >> "$GITHUB_OUTPUT"
          echo "parent_repo_name=$PARENT_REPO_NAME" >> "$GITHUB_OUTPUT"
          echo "parent_workflow_id=$PARENT_WORKFLOW_ID" >> "$GITHUB_OUTPUT"

      - name: Get Artifacts List and Generate Direct Download Links
        id: get_artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const repo_owner = '${{ steps.get_pr_details.outputs.parent_repo_owner }}';
            const repo_name = '${{ steps.get_pr_details.outputs.parent_repo_name }}';
            const run_id = '${{ steps.get_pr_details.outputs.parent_run_id }}';

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: repo_owner,
              repo: repo_name,
              run_id: run_id,
            });

            let artifactLinks = "";
            if (artifacts.data.artifacts.length > 0) {
              artifactLinks += "### Direct Download Links\n";
              artifactLinks += "> Click the links below to download. You must be logged into GitHub and have access to this repository. Artifacts expire after the retention period (default: 90 days).\n\n";
              artifacts.data.artifacts.forEach(artifact => {
                const downloadUrl = `https://github.com/${repo_owner}/${repo_name}/actions/runs/${run_id}/artifacts/${artifact.id}/zip`;
                artifactLinks += `- [${artifact.name}](${downloadUrl})\n`;
              });
            } else {
              artifactLinks = "No artifacts found for this build run.";
            }

            core.setOutput('artifact_links_markdown', artifactLinks);

      - name: Generate PR Comment Body
        id: generate_comment_body
        env:
          ARTIFACT_LINKS: ${{ steps.get_artifacts.outputs.artifact_links_markdown }}
        run: |
          WORKFLOW_RUN_URL="https://github.com/${{ steps.get_pr_details.outputs.parent_repo_owner }}/${{ steps.get_pr_details.outputs.parent_repo_name }}/actions/runs/${{ steps.get_pr_details.outputs.parent_run_id }}"
          COMMENT_BODY="Here are the successful executable builds from your PR:

          $ARTIFACT_LINKS

          You can also view the full workflow run details [here]($WORKFLOW_RUN_URL).
          "
          echo "comment_body<<EOF" >> "$GITHUB_OUTPUT"
          echo "$COMMENT_BODY" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create or Update PR Comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ steps.get_pr_details.outputs.pr_number }}
          body: ${{ steps.generate_comment_body.outputs.comment_body }}
          # Optional: Add a comment identifier if you want to update this specific comment later
          # comment-id: 'artifacts-link-comment'
          # edit-mode: replace # Use 'replace' to update the comment if it already exists